**What is an algorithm?**
A defined computation procedure that takes a set of input values and 
produces a set of output values.
It can be also seen as a computation steps that converts or maps an 
input to an output so that we have an input-output relation.

An algorithm can be seen as a higher-level mathematical abstraction 
of a computer program that does specific computation procedure to 
solve a specific problem.
-----------------------------------------------------------------------
**Example Algorithm**
SORTING

Input is a sequence of numbers:
For example,
<a0, a1, a2, ... an>

Output is an ordered sequence (either ascending or descending):
For example,
a0 < a3 < a2 < a1 < ... < an

Suppose input =     <78, 23, 32, 89, 46, 67>
then    output =    <23, 32, 46, 67, 78, 89>
-----------------------------------------------------------------------
**Correctness of an algorithm**
An algorithm is correct when for every input it generates the correct 
outputs. 
-----------------------------------------------------------------------
**Example Algorithm**
INSERTION SORT

Suppose we have a subset of a deck of cards: [5, 2, 4, 6, 1, 3]

Algorithm:
for j <- 1 to A.length - 1 do:
    key = A[j]
    # Insert A[j] into the sorted Sequence A[0 ... j - 1]
    i = j - 1
    while i >= 0 and A[j] > key do:
        A[i + 1] = A[i]
        i = i - 1
    end while
    A[i + 1] = key
end for

     0  1  2  3  4  5
A = [5, 2, 4, 6, 1, 3]

[5, 2, 4, 6, 1, 3]
1)  check 2 with 5:
        is 2 < 5? YES, so swap
    index + 1

[2, 5, 4, 6, 1, 3]
2)  check 4 with 5:
        is 4 < 5? YES, so swap
    check 4 with 5:
        is 4 < 2? NO, so no swap
    index + 1


[2, 4, 5, 6, 1, 3]
3)  check 6 with 5:
        is 6 < 5? NO, so no swap
    check 6 with 4:
        is 6 < 4? NO, so no swap
    check 6 with 2:
        is 6 < 2? NO, so no swap
    index + 1
Notice how we can just leave it with checking 5 and not needing to check 4 and 2.

[2, 4, 5, 6, 1, 3]
4)  check 1 with 6:
        is 1 < 6? YES, so swap
    check 1 with 5:
        is 1 < 5? YES, so swap
    check 1 with 4:
        is 1 < 4? YES, so swap
    check 1 with 2:
        is 1 < 2? YES, so swap
    index + 1
Notice how this time, since 1 was less than the initial check, it has to check all others.

[1, 2, 4, 5, 6, 3]
5)  check 3 with 6:
        is 3 < 6? YES, so swap
    check 3 with 5:
        is 3 < 5? YES, so swap
    check 3 with 4:
        is 3 < 4? YES, so swap
    check 3 with 2:
        is 3 < 2? NO, so swap
    check 3 with 1:
        is 3 < 1? NO, so swap
    index + 1 (index too big, so exits loop)
Notice how this time, we can actually stop the comparison with 2 and not necessary to check with 1.